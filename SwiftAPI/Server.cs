/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.phybros.thrift
{

  /// <summary>
  /// Represents the game server.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Server : TBase
  {
    private string _name;
    private List<OfflinePlayer> _offlinePlayers;
    private List<Player> _onlinePlayers;
    private string _version;
    private string _bukkitVersion;
    private int _maxPlayers;
    private string _ip;
    private int _port;
    private bool _allowFlight;
    private bool _allowNether;
    private bool _allowEnd;
    private List<OfflinePlayer> _whitelist;
    private List<OfflinePlayer> _bannedPlayers;
    private List<string> _bannedIps;
    private List<World> _worlds;

    /// <summary>
    /// The name of the server
    /// </summary>
    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// A list of all players who have ever played on this server.
    /// </summary>
    public List<OfflinePlayer> OfflinePlayers
    {
      get
      {
        return _offlinePlayers;
      }
      set
      {
        __isset.offlinePlayers = true;
        this._offlinePlayers = value;
      }
    }

    /// <summary>
    /// A list of players who are currently online
    /// </summary>
    public List<Player> OnlinePlayers
    {
      get
      {
        return _onlinePlayers;
      }
      set
      {
        __isset.onlinePlayers = true;
        this._onlinePlayers = value;
      }
    }

    /// <summary>
    /// The version of the server
    /// </summary>
    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// The version of CraftBukkit that is running
    /// </summary>
    public string BukkitVersion
    {
      get
      {
        return _bukkitVersion;
      }
      set
      {
        __isset.bukkitVersion = true;
        this._bukkitVersion = value;
      }
    }

    /// <summary>
    /// The max players allowed on the server
    /// </summary>
    public int MaxPlayers
    {
      get
      {
        return _maxPlayers;
      }
      set
      {
        __isset.maxPlayers = true;
        this._maxPlayers = value;
      }
    }

    /// <summary>
    /// The IP of the server (if set)
    /// </summary>
    public string Ip
    {
      get
      {
        return _ip;
      }
      set
      {
        __isset.ip = true;
        this._ip = value;
      }
    }

    /// <summary>
    /// The port the server is listening on
    /// </summary>
    public int Port
    {
      get
      {
        return _port;
      }
      set
      {
        __isset.port = true;
        this._port = value;
      }
    }

    /// <summary>
    /// Whether flight is allowed
    /// </summary>
    public bool AllowFlight
    {
      get
      {
        return _allowFlight;
      }
      set
      {
        __isset.allowFlight = true;
        this._allowFlight = value;
      }
    }

    /// <summary>
    /// Whether the nether is allowed
    /// </summary>
    public bool AllowNether
    {
      get
      {
        return _allowNether;
      }
      set
      {
        __isset.allowNether = true;
        this._allowNether = value;
      }
    }

    /// <summary>
    /// Whether the End is allowed
    /// </summary>
    public bool AllowEnd
    {
      get
      {
        return _allowEnd;
      }
      set
      {
        __isset.allowEnd = true;
        this._allowEnd = value;
      }
    }

    /// <summary>
    /// A list of players on the server's whitelist
    /// </summary>
    public List<OfflinePlayer> Whitelist
    {
      get
      {
        return _whitelist;
      }
      set
      {
        __isset.whitelist = true;
        this._whitelist = value;
      }
    }

    /// <summary>
    /// A list of currently banned players
    /// </summary>
    public List<OfflinePlayer> BannedPlayers
    {
      get
      {
        return _bannedPlayers;
      }
      set
      {
        __isset.bannedPlayers = true;
        this._bannedPlayers = value;
      }
    }

    /// <summary>
    /// A list of currently banned IP addresses
    /// </summary>
    public List<string> BannedIps
    {
      get
      {
        return _bannedIps;
      }
      set
      {
        __isset.bannedIps = true;
        this._bannedIps = value;
      }
    }

    /// <summary>
    /// A list of worlds currently running on the server
    /// </summary>
    public List<World> Worlds
    {
      get
      {
        return _worlds;
      }
      set
      {
        __isset.worlds = true;
        this._worlds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool offlinePlayers;
      public bool onlinePlayers;
      public bool version;
      public bool bukkitVersion;
      public bool maxPlayers;
      public bool ip;
      public bool port;
      public bool allowFlight;
      public bool allowNether;
      public bool allowEnd;
      public bool whitelist;
      public bool bannedPlayers;
      public bool bannedIps;
      public bool worlds;
    }

    public Server() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                OfflinePlayers = new List<OfflinePlayer>();
                TList _list17 = iprot.ReadListBegin();
                for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                {
                  OfflinePlayer _elem19 = new OfflinePlayer();
                  _elem19 = new OfflinePlayer();
                  _elem19.Read(iprot);
                  OfflinePlayers.Add(_elem19);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                OnlinePlayers = new List<Player>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  Player _elem22 = new Player();
                  _elem22 = new Player();
                  _elem22.Read(iprot);
                  OnlinePlayers.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Version = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              BukkitVersion = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              MaxPlayers = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Ip = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Port = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              AllowFlight = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              AllowNether = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              AllowEnd = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                Whitelist = new List<OfflinePlayer>();
                TList _list23 = iprot.ReadListBegin();
                for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                {
                  OfflinePlayer _elem25 = new OfflinePlayer();
                  _elem25 = new OfflinePlayer();
                  _elem25.Read(iprot);
                  Whitelist.Add(_elem25);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                BannedPlayers = new List<OfflinePlayer>();
                TList _list26 = iprot.ReadListBegin();
                for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                {
                  OfflinePlayer _elem28 = new OfflinePlayer();
                  _elem28 = new OfflinePlayer();
                  _elem28.Read(iprot);
                  BannedPlayers.Add(_elem28);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.List) {
              {
                BannedIps = new List<string>();
                TList _list29 = iprot.ReadListBegin();
                for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                {
                  string _elem31 = null;
                  _elem31 = iprot.ReadString();
                  BannedIps.Add(_elem31);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.List) {
              {
                Worlds = new List<World>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  World _elem34 = new World();
                  _elem34 = new World();
                  _elem34.Read(iprot);
                  Worlds.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Server");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (OfflinePlayers != null && __isset.offlinePlayers) {
        field.Name = "offlinePlayers";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, OfflinePlayers.Count));
          foreach (OfflinePlayer _iter35 in OfflinePlayers)
          {
            _iter35.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OnlinePlayers != null && __isset.onlinePlayers) {
        field.Name = "onlinePlayers";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, OnlinePlayers.Count));
          foreach (Player _iter36 in OnlinePlayers)
          {
            _iter36.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Version != null && __isset.version) {
        field.Name = "version";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Version);
        oprot.WriteFieldEnd();
      }
      if (BukkitVersion != null && __isset.bukkitVersion) {
        field.Name = "bukkitVersion";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BukkitVersion);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxPlayers) {
        field.Name = "maxPlayers";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxPlayers);
        oprot.WriteFieldEnd();
      }
      if (Ip != null && __isset.ip) {
        field.Name = "ip";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Ip);
        oprot.WriteFieldEnd();
      }
      if (__isset.port) {
        field.Name = "port";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Port);
        oprot.WriteFieldEnd();
      }
      if (__isset.allowFlight) {
        field.Name = "allowFlight";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AllowFlight);
        oprot.WriteFieldEnd();
      }
      if (__isset.allowNether) {
        field.Name = "allowNether";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AllowNether);
        oprot.WriteFieldEnd();
      }
      if (__isset.allowEnd) {
        field.Name = "allowEnd";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AllowEnd);
        oprot.WriteFieldEnd();
      }
      if (Whitelist != null && __isset.whitelist) {
        field.Name = "whitelist";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Whitelist.Count));
          foreach (OfflinePlayer _iter37 in Whitelist)
          {
            _iter37.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BannedPlayers != null && __isset.bannedPlayers) {
        field.Name = "bannedPlayers";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BannedPlayers.Count));
          foreach (OfflinePlayer _iter38 in BannedPlayers)
          {
            _iter38.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BannedIps != null && __isset.bannedIps) {
        field.Name = "bannedIps";
        field.Type = TType.List;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, BannedIps.Count));
          foreach (string _iter39 in BannedIps)
          {
            oprot.WriteString(_iter39);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Worlds != null && __isset.worlds) {
        field.Name = "worlds";
        field.Type = TType.List;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Worlds.Count));
          foreach (World _iter40 in Worlds)
          {
            _iter40.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Server(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",OfflinePlayers: ");
      sb.Append(OfflinePlayers);
      sb.Append(",OnlinePlayers: ");
      sb.Append(OnlinePlayers);
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(",BukkitVersion: ");
      sb.Append(BukkitVersion);
      sb.Append(",MaxPlayers: ");
      sb.Append(MaxPlayers);
      sb.Append(",Ip: ");
      sb.Append(Ip);
      sb.Append(",Port: ");
      sb.Append(Port);
      sb.Append(",AllowFlight: ");
      sb.Append(AllowFlight);
      sb.Append(",AllowNether: ");
      sb.Append(AllowNether);
      sb.Append(",AllowEnd: ");
      sb.Append(AllowEnd);
      sb.Append(",Whitelist: ");
      sb.Append(Whitelist);
      sb.Append(",BannedPlayers: ");
      sb.Append(BannedPlayers);
      sb.Append(",BannedIps: ");
      sb.Append(BannedIps);
      sb.Append(",Worlds: ");
      sb.Append(Worlds);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
