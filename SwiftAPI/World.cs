/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.phybros.thrift
{

  /// <summary>
  /// Represents a game world
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class World : TBase
  {
    private string _name;
    private long _time;
    private bool _hasStorm;
    private bool _isThundering;
    private bool _canGenerateStructures;
    private bool _allowAnimals;
    private bool _allowMonsters;
    private Difficulty _difficulty;
    private Environment _environment;
    private long _fullTime;
    private long _weatherDuration;
    private long _seed;
    private bool _isPvp;

    /// <summary>
    /// The name of the world
    /// </summary>
    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// The time of day
    /// </summary>
    public long Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    /// <summary>
    /// Whether or not there is a storm
    /// </summary>
    public bool HasStorm
    {
      get
      {
        return _hasStorm;
      }
      set
      {
        __isset.hasStorm = true;
        this._hasStorm = value;
      }
    }

    /// <summary>
    /// If there is thunder
    /// </summary>
    public bool IsThundering
    {
      get
      {
        return _isThundering;
      }
      set
      {
        __isset.isThundering = true;
        this._isThundering = value;
      }
    }

    /// <summary>
    /// Whether or not structures are being generated
    /// </summary>
    public bool CanGenerateStructures
    {
      get
      {
        return _canGenerateStructures;
      }
      set
      {
        __isset.canGenerateStructures = true;
        this._canGenerateStructures = value;
      }
    }

    /// <summary>
    /// Whether or not animals will spawn
    /// </summary>
    public bool AllowAnimals
    {
      get
      {
        return _allowAnimals;
      }
      set
      {
        __isset.allowAnimals = true;
        this._allowAnimals = value;
      }
    }

    /// <summary>
    /// Whether or not monsters will spawn
    /// </summary>
    public bool AllowMonsters
    {
      get
      {
        return _allowMonsters;
      }
      set
      {
        __isset.allowMonsters = true;
        this._allowMonsters = value;
      }
    }

    /// <summary>
    /// The difficulty of the world
    /// 
    /// <seealso cref="Difficulty"/>
    /// </summary>
    public Difficulty Difficulty
    {
      get
      {
        return _difficulty;
      }
      set
      {
        __isset.difficulty = true;
        this._difficulty = value;
      }
    }

    /// <summary>
    /// The environment of the world
    /// 
    /// <seealso cref="Environment"/>
    /// </summary>
    public Environment Environment
    {
      get
      {
        return _environment;
      }
      set
      {
        __isset.environment = true;
        this._environment = value;
      }
    }

    /// <summary>
    /// Gets the full in-game time on this world
    /// </summary>
    public long FullTime
    {
      get
      {
        return _fullTime;
      }
      set
      {
        __isset.fullTime = true;
        this._fullTime = value;
      }
    }

    /// <summary>
    /// The remaining time in ticks of the current conditions.
    /// </summary>
    public long WeatherDuration
    {
      get
      {
        return _weatherDuration;
      }
      set
      {
        __isset.weatherDuration = true;
        this._weatherDuration = value;
      }
    }

    /// <summary>
    /// She Seed for this world.
    /// </summary>
    public long Seed
    {
      get
      {
        return _seed;
      }
      set
      {
        __isset.seed = true;
        this._seed = value;
      }
    }

    /// <summary>
    /// The current PVP setting for this world.
    /// </summary>
    public bool IsPvp
    {
      get
      {
        return _isPvp;
      }
      set
      {
        __isset.isPvp = true;
        this._isPvp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool time;
      public bool hasStorm;
      public bool isThundering;
      public bool canGenerateStructures;
      public bool allowAnimals;
      public bool allowMonsters;
      public bool difficulty;
      public bool environment;
      public bool fullTime;
      public bool weatherDuration;
      public bool seed;
      public bool isPvp;
    }

    public World() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Time = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              HasStorm = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IsThundering = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              CanGenerateStructures = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              AllowAnimals = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              AllowMonsters = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Difficulty = (Difficulty)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Environment = (Environment)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              FullTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              WeatherDuration = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              Seed = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Bool) {
              IsPvp = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("World");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.time) {
        field.Name = "time";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Time);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasStorm) {
        field.Name = "hasStorm";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasStorm);
        oprot.WriteFieldEnd();
      }
      if (__isset.isThundering) {
        field.Name = "isThundering";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsThundering);
        oprot.WriteFieldEnd();
      }
      if (__isset.canGenerateStructures) {
        field.Name = "canGenerateStructures";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanGenerateStructures);
        oprot.WriteFieldEnd();
      }
      if (__isset.allowAnimals) {
        field.Name = "allowAnimals";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AllowAnimals);
        oprot.WriteFieldEnd();
      }
      if (__isset.allowMonsters) {
        field.Name = "allowMonsters";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AllowMonsters);
        oprot.WriteFieldEnd();
      }
      if (__isset.difficulty) {
        field.Name = "difficulty";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Difficulty);
        oprot.WriteFieldEnd();
      }
      if (__isset.environment) {
        field.Name = "environment";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Environment);
        oprot.WriteFieldEnd();
      }
      if (__isset.fullTime) {
        field.Name = "fullTime";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FullTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.weatherDuration) {
        field.Name = "weatherDuration";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(WeatherDuration);
        oprot.WriteFieldEnd();
      }
      if (__isset.seed) {
        field.Name = "seed";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Seed);
        oprot.WriteFieldEnd();
      }
      if (__isset.isPvp) {
        field.Name = "isPvp";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsPvp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("World(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",Time: ");
      sb.Append(Time);
      sb.Append(",HasStorm: ");
      sb.Append(HasStorm);
      sb.Append(",IsThundering: ");
      sb.Append(IsThundering);
      sb.Append(",CanGenerateStructures: ");
      sb.Append(CanGenerateStructures);
      sb.Append(",AllowAnimals: ");
      sb.Append(AllowAnimals);
      sb.Append(",AllowMonsters: ");
      sb.Append(AllowMonsters);
      sb.Append(",Difficulty: ");
      sb.Append(Difficulty);
      sb.Append(",Environment: ");
      sb.Append(Environment);
      sb.Append(",FullTime: ");
      sb.Append(FullTime);
      sb.Append(",WeatherDuration: ");
      sb.Append(WeatherDuration);
      sb.Append(",Seed: ");
      sb.Append(Seed);
      sb.Append(",IsPvp: ");
      sb.Append(IsPvp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
