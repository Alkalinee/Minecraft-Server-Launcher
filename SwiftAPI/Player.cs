/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using System.ComponentModel;
namespace org.phybros.thrift
{

  /// <summary>
  /// Represents a player on the server
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Player : TBase, INotifyPropertyChanged
  {
    private string _name;
    private GameMode _gamemode;
    private bool _isSleeping;
    private bool _isSneaking;
    private bool _isSprinting;
    private bool _isInVehicle;
    private long _xpToNextLevel;
    private int _level;
    private string _ip;
    private bool _isOp;
    private int _foodLevel;
    private int _health;
    private double _exhaustion;
    private long _firstPlayed;
    private long _lastPlayed;
    private bool _isBanned;
    private bool _isWhitelisted;
    private PlayerInventory _inventory;
    private double _levelProgress;
    private int _port;
    private Location _location;
    private double _healthDouble;

    /// <summary>
    /// The player's name
    /// </summary>
    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
          if (this._name != value)
          {
               this._name = value;
               OnPropertyChanged("Name");
          }
       
      }
    }

    /// <summary>
    /// The player's current gamemode
    /// 
    /// <seealso cref="GameMode"/>
    /// </summary>
    public GameMode Gamemode
    {
      get
      {
        return _gamemode;
      }
      set
      {
        __isset.gamemode = true;
        if (this._gamemode != value)
        {
            this._gamemode = value;
            OnPropertyChanged("Gamemode");
        }
      }
    }

    /// <summary>
    /// Whether the player is sleeping or not
    /// </summary>
    public bool IsSleeping
    {
      get
      {
        return _isSleeping;
      }
      set
      {
        __isset.isSleeping = true;
        if (this._isSleeping != value)
        {
            this._isSleeping = value;
            OnPropertyChanged("IsSleeping");
        }
      }
    }

    /// <summary>
    /// Whether the player is sneaking or not
    /// </summary>
    public bool IsSneaking
    {
      get
      {
        return _isSneaking;
      }
      set
      {
        __isset.isSneaking = true;
        if (this._isSneaking != value)
        {
            this._isSneaking = value;
            OnPropertyChanged("IsSneaking");
        }
      }
    }

    /// <summary>
    /// Whether the player is sprinting or not
    /// </summary>
    public bool IsSprinting
    {
      get
      {
        return _isSprinting;
      }
      set
      {
        __isset.isSprinting = true;
        if (this._isSprinting != value)
        {
            this._isSprinting = value;
            OnPropertyChanged("IsSprinting");
        }
      }
    }

    /// <summary>
    /// Whether the player is currently in a vehicle (minecart, boat, pig etc.)
    /// </summary>
    public bool IsInVehicle
    {
      get
      {
        return _isInVehicle;
      }
      set
      {
        __isset.isInVehicle = true;
        if (this._isInVehicle != value)
        {
            this._isInVehicle = value;
            OnPropertyChanged("IsInVehicle");
        }
      }
    }

    /// <summary>
    /// How many XP the Player needs to reach the next Level
    /// </summary>
    public long XpToNextLevel
    {
      get
      {
        return _xpToNextLevel;
      }
      set
      {
        __isset.xpToNextLevel = true;
        if (this._xpToNextLevel != value)
        {
            this._xpToNextLevel = value;
            OnPropertyChanged("XpToNextLevel");
        }
      }
    }

    /// <summary>
    /// The current Level of the player
    /// </summary>
    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        if (this._level != value)
        {
            this._level = value;
            OnPropertyChanged("Level");
        }
      }
    }

    /// <summary>
    /// The IP address the player's client is currently connected on
    /// </summary>
    public string Ip
    {
      get
      {
        return _ip;
      }
      set
      {
        __isset.ip = true;
        if (this._ip != value)
        {
            this._ip = value;
            OnPropertyChanged("Ip");
        }
      }
    }

    /// <summary>
    /// Whether the Player is opped or not
    /// </summary>
    public bool IsOp
    {
      get
      {
        return _isOp;
      }
      set
      {
        __isset.isOp = true;
        if (this._isOp != value)
        {
            this._isOp = value;
            OnPropertyChanged("IsOp");
        }
      }
    }

    /// <summary>
    /// How hungry the Player is in halves of chicken legs (max possible is 20)
    /// </summary>
    public int FoodLevel
    {
      get
      {
        return _foodLevel;
      }
      set
      {
        __isset.foodLevel = true;
        if (this._foodLevel != value)
        {
            this._foodLevel = value;
            OnPropertyChanged("FoodLevel");
        }
      }
    }

    /// <summary>
    /// DEPRECATED: use Player.healthDouble instead.
    /// How much health the Player has in halves of hearts (20 max)
    /// </summary>
    public int Health
    {
      get
      {
        return _health;
      }
      set
      {
        __isset.health = true;
        if (this._health != value)
        {
            this._health = value;
            OnPropertyChanged("Health");
        }
      }
    }

    /// <summary>
    /// How tired the player is (percentage value)
    /// </summary>
    public double Exhaustion
    {
      get
      {
        return _exhaustion;
      }
      set
      {
        __isset.exhaustion = true;
        if (this._exhaustion != value)
        {
            this._exhaustion = value;
            OnPropertyChanged("Exhaustion");
        }
      }
    }

    /// <summary>
    /// The time/date the the player first joined (UNIX-timestamp style)
    /// </summary>
    public long FirstPlayed
    {
      get
      {
        return _firstPlayed;
      }
      set
      {
        __isset.firstPlayed = true;
        if (this._firstPlayed != value)
        {
            this._firstPlayed = value;
            OnPropertyChanged("FirstPlayed");
        }
      }
    }

    /// <summary>
    /// The time/date the the player last joined (UNIX-timestamp style)
    /// </summary>
    public long LastPlayed
    {
      get
      {
        return _lastPlayed;
      }
      set
      {
        __isset.lastPlayed = true;
        if (this._lastPlayed != value)
        {
            this._lastPlayed = value;
            OnPropertyChanged("LastPlayed");
        }
      }
    }

    /// <summary>
    /// If the player is currently banned from the server
    /// </summary>
    public bool IsBanned
    {
      get
      {
        return _isBanned;
      }
      set
      {
        __isset.isBanned = true;
        if (this._isBanned != value)
        {
            this._isBanned = value;
            OnPropertyChanged("IsBanned");
        }
      }
    }

    /// <summary>
    /// If the player is currently on the server's whitelist
    /// </summary>
    public bool IsWhitelisted
    {
      get
      {
        return _isWhitelisted;
      }
      set
      {
        __isset.isWhitelisted = true;
        if (this._isWhitelisted != value)
        {
            this._isWhitelisted = value;
            OnPropertyChanged("IsWhitelisted");
        }
      }
    }

    /// <summary>
    /// The current inventory of the player
    /// </summary>
    public PlayerInventory Inventory
    {
      get
      {
        return _inventory;
      }
      set
      {
        __isset.inventory = true;
        if (this._inventory != value)
        {
            this._inventory = value;
            OnPropertyChanged("Inventory");
        }
      }
    }

    /// <summary>
    /// Percentage progress to the next level
    /// </summary>
    public double LevelProgress
    {
      get
      {
        return _levelProgress;
      }
      set
      {
        __isset.levelProgress = true;
        if (this._levelProgress != value)
        {
            this._levelProgress = value;
            OnPropertyChanged("LevelProgress");
        }
      }
    }

    /// <summary>
    /// The port number that the player's client is currently connected on
    /// </summary>
    public int Port
    {
      get
      {
        return _port;
      }
      set
      {
        __isset.port = true;
        if (this._port != value)
        {
            this._port = value;
            OnPropertyChanged("Port");
        }
      }
    }

    /// <summary>
    /// The current location of the player
    /// </summary>
    public Location Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        if (this._location != value)
        {
            this._location = value;
            OnPropertyChanged("Location");
        }
      }
    }

    /// <summary>
    /// The health of the player. Use this instead of Player.health.
    /// </summary>
    public double HealthDouble
    {
      get
      {
        return _healthDouble;
      }
      set
      {
        __isset.healthDouble = true;
        if (this._healthDouble != value)
        {
            this._healthDouble = value;
            OnPropertyChanged("HealthDouble");
        }
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool gamemode;
      public bool isSleeping;
      public bool isSneaking;
      public bool isSprinting;
      public bool isInVehicle;
      public bool xpToNextLevel;
      public bool level;
      public bool ip;
      public bool isOp;
      public bool foodLevel;
      public bool health;
      public bool exhaustion;
      public bool firstPlayed;
      public bool lastPlayed;
      public bool isBanned;
      public bool isWhitelisted;
      public bool inventory;
      public bool levelProgress;
      public bool port;
      public bool location;
      public bool healthDouble;
    }

    public Player() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Gamemode = (GameMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              IsSleeping = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IsSneaking = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              IsSprinting = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              IsInVehicle = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              XpToNextLevel = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Ip = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              IsOp = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              FoodLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Health = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Double) {
              Exhaustion = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              FirstPlayed = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I64) {
              LastPlayed = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Bool) {
              IsBanned = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Bool) {
              IsWhitelisted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Struct) {
              Inventory = new PlayerInventory();
              Inventory.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Double) {
              LevelProgress = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Port = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Struct) {
              Location = new Location();
              Location.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Double) {
              HealthDouble = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Player");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.gamemode) {
        field.Name = "gamemode";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Gamemode);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSleeping) {
        field.Name = "isSleeping";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSleeping);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSneaking) {
        field.Name = "isSneaking";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSneaking);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSprinting) {
        field.Name = "isSprinting";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSprinting);
        oprot.WriteFieldEnd();
      }
      if (__isset.isInVehicle) {
        field.Name = "isInVehicle";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsInVehicle);
        oprot.WriteFieldEnd();
      }
      if (__isset.xpToNextLevel) {
        field.Name = "xpToNextLevel";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(XpToNextLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (Ip != null && __isset.ip) {
        field.Name = "ip";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Ip);
        oprot.WriteFieldEnd();
      }
      if (__isset.isOp) {
        field.Name = "isOp";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsOp);
        oprot.WriteFieldEnd();
      }
      if (__isset.foodLevel) {
        field.Name = "foodLevel";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FoodLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.health) {
        field.Name = "health";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Health);
        oprot.WriteFieldEnd();
      }
      if (__isset.exhaustion) {
        field.Name = "exhaustion";
        field.Type = TType.Double;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Exhaustion);
        oprot.WriteFieldEnd();
      }
      if (__isset.firstPlayed) {
        field.Name = "firstPlayed";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FirstPlayed);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastPlayed) {
        field.Name = "lastPlayed";
        field.Type = TType.I64;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastPlayed);
        oprot.WriteFieldEnd();
      }
      if (__isset.isBanned) {
        field.Name = "isBanned";
        field.Type = TType.Bool;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsBanned);
        oprot.WriteFieldEnd();
      }
      if (__isset.isWhitelisted) {
        field.Name = "isWhitelisted";
        field.Type = TType.Bool;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsWhitelisted);
        oprot.WriteFieldEnd();
      }
      if (Inventory != null && __isset.inventory) {
        field.Name = "inventory";
        field.Type = TType.Struct;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        Inventory.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.levelProgress) {
        field.Name = "levelProgress";
        field.Type = TType.Double;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LevelProgress);
        oprot.WriteFieldEnd();
      }
      if (__isset.port) {
        field.Name = "port";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Port);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.Struct;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        Location.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.healthDouble) {
        field.Name = "healthDouble";
        field.Type = TType.Double;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(HealthDouble);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Player(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",Gamemode: ");
      sb.Append(Gamemode);
      sb.Append(",IsSleeping: ");
      sb.Append(IsSleeping);
      sb.Append(",IsSneaking: ");
      sb.Append(IsSneaking);
      sb.Append(",IsSprinting: ");
      sb.Append(IsSprinting);
      sb.Append(",IsInVehicle: ");
      sb.Append(IsInVehicle);
      sb.Append(",XpToNextLevel: ");
      sb.Append(XpToNextLevel);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",Ip: ");
      sb.Append(Ip);
      sb.Append(",IsOp: ");
      sb.Append(IsOp);
      sb.Append(",FoodLevel: ");
      sb.Append(FoodLevel);
      sb.Append(",Health: ");
      sb.Append(Health);
      sb.Append(",Exhaustion: ");
      sb.Append(Exhaustion);
      sb.Append(",FirstPlayed: ");
      sb.Append(FirstPlayed);
      sb.Append(",LastPlayed: ");
      sb.Append(LastPlayed);
      sb.Append(",IsBanned: ");
      sb.Append(IsBanned);
      sb.Append(",IsWhitelisted: ");
      sb.Append(IsWhitelisted);
      sb.Append(",Inventory: ");
      sb.Append(Inventory== null ? "<null>" : Inventory.ToString());
      sb.Append(",LevelProgress: ");
      sb.Append(LevelProgress);
      sb.Append(",Port: ");
      sb.Append(Port);
      sb.Append(",Location: ");
      sb.Append(Location== null ? "<null>" : Location.ToString());
      sb.Append(",HealthDouble: ");
      sb.Append(HealthDouble);
      sb.Append(")");
      return sb.ToString();
    }

    private void OnPropertyChanged(string propertyName)
    {
        PropertyChangedEventHandler handler = PropertyChanged;
        if (handler != null)
        {
            handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
  }

}
