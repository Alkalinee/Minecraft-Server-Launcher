/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.phybros.thrift
{

  /// <summary>
  /// Represents a server plugin. All the values that are populated into this
  /// object are  taken from the Plugin's server-side configuration file.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Plugin : TBase
  {
    private string _name;
    private string _description;
    private string _version;
    private string _website;
    private List<string> _authors;
    private bool _enabled;
    private string _fileName;

    /// <summary>
    /// The full name of the plugin
    /// </summary>
    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// The description of the plugin
    /// </summary>
    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    /// <summary>
    /// The installed version of the plugin
    /// </summary>
    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// The website of the plugin
    /// </summary>
    public string Website
    {
      get
      {
        return _website;
      }
      set
      {
        __isset.website = true;
        this._website = value;
      }
    }

    /// <summary>
    /// The authors of the plugin
    /// </summary>
    public List<string> Authors
    {
      get
      {
        return _authors;
      }
      set
      {
        __isset.authors = true;
        this._authors = value;
      }
    }

    /// <summary>
    /// Whether or not the plugin is enabled
    /// </summary>
    public bool Enabled
    {
      get
      {
        return _enabled;
      }
      set
      {
        __isset.enabled = true;
        this._enabled = value;
      }
    }

    /// <summary>
    /// The name of the JAR file that this plugin was loaded from
    /// </summary>
    public string FileName
    {
      get
      {
        return _fileName;
      }
      set
      {
        __isset.fileName = true;
        this._fileName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool description;
      public bool version;
      public bool website;
      public bool authors;
      public bool enabled;
      public bool fileName;
    }

    public Plugin() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Version = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Website = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Authors = new List<string>();
                TList _list13 = iprot.ReadListBegin();
                for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                {
                  string _elem15 = null;
                  _elem15 = iprot.ReadString();
                  Authors.Add(_elem15);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Enabled = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              FileName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Plugin");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (Version != null && __isset.version) {
        field.Name = "version";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Version);
        oprot.WriteFieldEnd();
      }
      if (Website != null && __isset.website) {
        field.Name = "website";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Website);
        oprot.WriteFieldEnd();
      }
      if (Authors != null && __isset.authors) {
        field.Name = "authors";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Authors.Count));
          foreach (string _iter16 in Authors)
          {
            oprot.WriteString(_iter16);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.enabled) {
        field.Name = "enabled";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Enabled);
        oprot.WriteFieldEnd();
      }
      if (FileName != null && __isset.fileName) {
        field.Name = "fileName";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FileName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Plugin(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",Description: ");
      sb.Append(Description);
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(",Website: ");
      sb.Append(Website);
      sb.Append(",Authors: ");
      sb.Append(Authors);
      sb.Append(",Enabled: ");
      sb.Append(Enabled);
      sb.Append(",FileName: ");
      sb.Append(FileName);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
