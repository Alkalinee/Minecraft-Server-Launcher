/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.phybros.thrift
{

  /// <summary>
  /// Represents a player's inventory
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PlayerInventory : TBase
  {
    private List<ItemStack> _inventory;
    private ItemStack _itemInHand;
    private PlayerArmor _armor;

    /// <summary>
    /// The items in the Player's inventory
    /// </summary>
    public List<ItemStack> Inventory
    {
      get
      {
        return _inventory;
      }
      set
      {
        __isset.inventory = true;
        this._inventory = value;
      }
    }

    /// <summary>
    /// The item(s) that the player is currently holding
    /// </summary>
    public ItemStack ItemInHand
    {
      get
      {
        return _itemInHand;
      }
      set
      {
        __isset.itemInHand = true;
        this._itemInHand = value;
      }
    }

    /// <summary>
    /// The armor that the player is currently wearing
    /// </summary>
    public PlayerArmor Armor
    {
      get
      {
        return _armor;
      }
      set
      {
        __isset.armor = true;
        this._armor = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool inventory;
      public bool itemInHand;
      public bool armor;
    }

    public PlayerInventory() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Inventory = new List<ItemStack>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  ItemStack _elem11 = new ItemStack();
                  _elem11 = new ItemStack();
                  _elem11.Read(iprot);
                  Inventory.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              ItemInHand = new ItemStack();
              ItemInHand.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Armor = new PlayerArmor();
              Armor.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerInventory");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Inventory != null && __isset.inventory) {
        field.Name = "inventory";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Inventory.Count));
          foreach (ItemStack _iter12 in Inventory)
          {
            _iter12.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ItemInHand != null && __isset.itemInHand) {
        field.Name = "itemInHand";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        ItemInHand.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Armor != null && __isset.armor) {
        field.Name = "armor";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Armor.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerInventory(");
      sb.Append("Inventory: ");
      sb.Append(Inventory);
      sb.Append(",ItemInHand: ");
      sb.Append(ItemInHand== null ? "<null>" : ItemInHand.ToString());
      sb.Append(",Armor: ");
      sb.Append(Armor== null ? "<null>" : Armor.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
