/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.phybros.thrift
{

  /// <summary>
  /// A stack of items
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ItemStack : TBase
  {
    private int _amount;
    private int _typeId;
    private int _durability;
    private Dictionary<Enchantment, int> _enchantments;
    private List<string> _lore;
    private string _displayName;
    private int _data;

    /// <summary>
    /// How many of this item are currently in the stack
    /// </summary>
    public int Amount
    {
      get
      {
        return _amount;
      }
      set
      {
        __isset.amount = true;
        this._amount = value;
      }
    }

    /// <summary>
    /// The type ID of the item
    /// </summary>
    public int TypeId
    {
      get
      {
        return _typeId;
      }
      set
      {
        __isset.typeId = true;
        this._typeId = value;
      }
    }

    /// <summary>
    /// The durability of the item
    /// </summary>
    public int Durability
    {
      get
      {
        return _durability;
      }
      set
      {
        __isset.durability = true;
        this._durability = value;
      }
    }



    /// <summary>
    /// The current enchantments in effect on this item
    /// </summary>
    public Dictionary<Enchantment, int> Enchantments
    {
      get
      {
        return _enchantments;
      }
      set
      {
        __isset.enchantments = true;
        this._enchantments = value;
      }
    }

    /// <summary>
    /// The lore associated with this item
    /// @since 1.5
    /// </summary>
    public List<string> Lore
    {
      get
      {
        return _lore;
      }
      set
      {
        __isset.lore = true;
        this._lore = value;
      }
    }

    /// <summary>
    /// The display name of the item
    /// @since 1.5
    /// </summary>
    public string DisplayName
    {
      get
      {
        return _displayName;
      }
      set
      {
        __isset.displayName = true;
        this._displayName = value;
      }
    }

    /// <summary>
    /// The data value associated with this item
    /// @since 1.5
    /// </summary>
    public int Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool amount;
      public bool typeId;
      public bool durability;
      public bool enchantments;
      public bool lore;
      public bool displayName;
      public bool data;
    }

    public ItemStack() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Amount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TypeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Durability = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Enchantments = new Dictionary<Enchantment, int>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  Enchantment _key2;
                  int _val3;
                  _key2 = (Enchantment)iprot.ReadI32();
                  _val3 = iprot.ReadI32();
                  Enchantments[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Lore = new List<string>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  string _elem6 = null;
                  _elem6 = iprot.ReadString();
                  Lore.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              DisplayName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Data = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ItemStack");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.amount) {
        field.Name = "amount";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Amount);
        oprot.WriteFieldEnd();
      }
      if (__isset.typeId) {
        field.Name = "typeId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TypeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.durability) {
        field.Name = "durability";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Durability);
        oprot.WriteFieldEnd();
      }
      if (Enchantments != null && __isset.enchantments) {
        field.Name = "enchantments";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, Enchantments.Count));
          foreach (Enchantment _iter7 in Enchantments.Keys)
          {
            oprot.WriteI32((int)_iter7);
            oprot.WriteI32(Enchantments[_iter7]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Lore != null && __isset.lore) {
        field.Name = "lore";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Lore.Count));
          foreach (string _iter8 in Lore)
          {
            oprot.WriteString(_iter8);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (DisplayName != null && __isset.displayName) {
        field.Name = "displayName";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisplayName);
        oprot.WriteFieldEnd();
      }
      if (__isset.data) {
        field.Name = "data";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Data);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ItemStack(");
      sb.Append("Amount: ");
      sb.Append(Amount);
      sb.Append(",TypeId: ");
      sb.Append(TypeId);
      sb.Append(",Durability: ");
      sb.Append(Durability);
      sb.Append(",Enchantments: ");
      sb.Append(Enchantments);
      sb.Append(",Lore: ");
      sb.Append(Lore);
      sb.Append(",DisplayName: ");
      sb.Append(DisplayName);
      sb.Append(",Data: ");
      sb.Append(Data);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
